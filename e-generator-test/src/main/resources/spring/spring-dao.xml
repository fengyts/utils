<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
	default-autowire="byName">
	
	<!--创建jdbc数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
            <property name="driverClassName" value="${dataSource.driverClassName}"></property>  
            <property name="url" value="${dataSource.url}"></property>  
            <property name="username" value="${dataSource.username}"></property>  
            <property name="password" value="${dataSource.password}"></property>  
            <!-- <property name="connectionProperties" value="config.decrypt=true"/>  
            <property name="filters" value="config" /> -->  
            <!-- 配置初始化大小、最小、最大 -->  
            <property name="initialSize" value="1" />  
            <property name="minIdle" value="1" />   
            <property name="maxActive" value="8" />  
            <!-- 配置获取连接等待超时的时间 -->  
            <property name="maxWait" value="60000" />  
  
            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
            <property name="timeBetweenEvictionRunsMillis" value="60000" />  
            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
            <property name="minEvictableIdleTimeMillis" value="300000" />  
      
            <property name="testWhileIdle" value="true" />  
            <property name="testOnBorrow" value="false" />  
            <property name="testOnReturn" value="false" />  
            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
            <property name="poolPreparedStatements" value="true" />  
            <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
    </bean>
    
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 可通过注解控制事务 -->
	<!-- <tx:annotation-driven /> -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- mybatis 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--  		<property name="configLocation" value="classpath:mybatis-sqlmap-config.xml" /> -->
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="ng.bayue.generator.mybatis.model"/>
		<property name="mapperLocations" value="classpath*:ng/bayue/generator/mybatis/sqlmap/**/*.xml" />
	</bean>
	
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="ng.bayue.generator.mybatis.dao" /> 
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
</beans>